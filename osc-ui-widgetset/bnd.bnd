# Build a theme/widgetset fragment by embedding the widgetsets and core themes. The fragment 
# attaches to the com.vaadin.server bundle so that the filteringtable can modify the 
# com.vaadin.ui package (yuck!)

# depend.bnd is generated by antrun prior to running bnd-maven-plugin
-include target/depend.bnd

# Make this a fragment of the server
server.attach.range: [${versionmask;==;${vaadin.version}},${versionmask;+;${vaadin.version}})

Fragment-Host: com.vaadin.server;bundle-version="${server.attach.range}"

# Create a bundle including the widgetsets that we need for the OSC UI
-includeresource: \
    @${filteringtable.dep},\
    @${popupbutton.dep},\
    @${stepper.dep},\
    @${vaadin-themes.dep}
    
# Remember to publish the widgetsets and CSS from the repackaged widgets

Vaadin-Package-Version: 1
Vaadin-Widgetsets: \
    org.tepi.filtertable.gwt.FilterTableWidgetset,\
    org.vaadin.hene.popupbutton.widgetset.PopupbuttonWidgetset,\
    org.vaadin.risto.stepper.widgetset.StepperWidgetset
Vaadin-Stylesheets: \
    VAADIN/addons/stepper/stepper.scss,\
    /VAADIN/addons/stepper/stepper.scss

    
# We don't provide any of the client packages so that we can exclude
# GWT dependencies, dramatically decreasing the size of the deployment
-exportcontents: \
    ${filterout;${packages};client}

Import-Package: \
    !com.google.gwt.*,\
    !com.vaadin.client.*,\
    *

# The Vaadin themes must be on the classpath in order to work, but as a result bnd thinks they might be
# Java code. The packages aren't valid pacakge names (for Java) but that's ok as they aren't really code   
-fixupmessages: "Invalid package name: 'VAADIN.themes."