/*******************************************************************************
 * Copyright (c) Intel Corporation
 * Copyright (c) 2017
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package org.osc.core.broker.service.dto;

import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.osc.core.broker.model.virtualization.VirtualizationType;
import org.osc.core.broker.util.ValidateUtil;
import org.osc.sdk.controller.TagEncapsulationType;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * This class is an internal class contained within the DistributedAppliance
 * DTO. It extends the BaseEntity so that we can compare it to the VirtualSystem
 * entity.
 */
@ApiModel(description = "Parent Id is applicable for this object. The corresponding Distributed Appliance is considered"
        + " the parent of a Virtual System.")
@XmlRootElement(name = "virtualSystem")
@XmlAccessorType(XmlAccessType.FIELD)
public class VirtualSystemDto extends BaseDto {

    @ApiModelProperty(value = "The Virtual system name. This is generated by OSC", readOnly = true)
    private String name;

    @ApiModelProperty(value = "The Name of the Distributed Appliance this Virtual System belongs to",
            required = true,
            readOnly = true)
    private String distributedAppliance;

    @ApiModelProperty(value = "The Name of the Virtualization Connector this Virtual System belongs to",
            readOnly = true)
    private String virtualizationConnectorName = "";

    @ApiModelProperty(value = "The Virtualization type of the Virtual System", required = true, readOnly = true)
    private VirtualizationType virtualizationType;

    @ApiModelProperty(value = "The domain this virtual system belongs to", required = true, readOnly = true)
    private String domainName = "";

    @ApiModelProperty(value = "The Id of the Virtualization Connector this Virtual System belongs to",
            required = true,
            readOnly = true)
    private Long vcId;

    @ApiModelProperty(value = "The domain id this virtual system belongs to", required = true, readOnly = true)
    private Long domainId;

    @ApiModelProperty(
            value = "The type of encapsulation used to deliver packets for inspection. This is valid for OpenStack Environments Only. Required field for Openstack.",
            readOnly = true)
    private TagEncapsulationType encapsulationType;

    @ApiModelProperty(required = true, readOnly = true)
    private boolean markForDeletion = false;

    public Long getVcId() {
        return this.vcId;
    }

    public void setVcId(Long vcId) {
        this.vcId = vcId;
    }

    public Long getDomainId() {
        return this.domainId;
    }

    public void setDomainId(Long domainId) {
        this.domainId = domainId;
    }

    public String getVirtualizationConnectorName() {
        return this.virtualizationConnectorName;
    }

    public void setVirtualizationConnectorName(String virtualizationConnectorName) {
        this.virtualizationConnectorName = virtualizationConnectorName;
    }

    public VirtualizationType getVirtualizationType() {
        return this.virtualizationType;
    }

    public void setVirtualizationType(VirtualizationType virtualizationType) {
        this.virtualizationType = virtualizationType;
    }

    public void setDomainName(String domainName) {
        this.domainName = domainName;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDomainName() {
        return this.domainName;
    }

    public boolean isMarkForDeletion() {
        return this.markForDeletion;
    }

    public void setMarkForDeletion(boolean markForDeletion) {
        this.markForDeletion = markForDeletion;
    }

    public String getDistributedAppliance() {
        return this.distributedAppliance;
    }

    public void setDistributedAppliance(String distirbutedAppliance) {
        this.distributedAppliance = distirbutedAppliance;
    }

    public TagEncapsulationType getEncapsulationType() {
        return this.encapsulationType;
    }

    public void setEncapsulationType(TagEncapsulationType encapsulationType) {
        this.encapsulationType = encapsulationType;
    }

    @Override
    public int hashCode() {
        int hash = 1;
        hash = (int) (hash * 31 + this.vcId);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        if (object == null) {
            return false;
        }
        if (getClass() != object.getClass()) {
            return false;
        }
        if (this == object) {
            return true;
        }

        VirtualSystemDto other = (VirtualSystemDto) object;

        if (getVcId().equals(other.getVcId())) {
            return true;
        }

        return false;
    }

    @Override
    public String toString() {
        return "VirtualSystemDto [id=" + getId() + ", name=" + this.name + ", virtualizationConnectorName="
                + this.virtualizationConnectorName + ", virtualizationType=" + this.virtualizationType + ", domainName="
                + this.domainName + ", vcId=" + this.vcId + ", domainId=" + this.domainId + ", markForDeletion="
                + this.markForDeletion + "]";
    }

    public static void checkForNullFields(VirtualSystemDto dto) throws Exception {

        // build a map of (field,value) pairs to be checked for null/empty
        // values
        Map<String, Object> map = new HashMap<String, Object>();

        map.put("Virtualization Connector Id", dto.getVcId());

        ValidateUtil.checkForNullFields(map);
    }

}
